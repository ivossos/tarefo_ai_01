"""
Ferramenta de integra√ß√£o com WhatsApp para o TarefoAI
"""
import os
import json
import logging
from pathlib import Path
import time
import base64

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class WhatsAppTool:
    """Ferramenta para integra√ß√£o com o WhatsApp via Twilio"""
    
    def __init__(self):
        # Configura√ß√µes da ferramenta
        self.name = "WhatsApp Tool"
        self.description = "Integra√ß√£o com a API do WhatsApp via Twilio para envio e recebimento de mensagens"
        self.account_sid = os.environ.get("TWILIO_ACCOUNT_SID")
        self.auth_token = os.environ.get("TWILIO_AUTH_TOKEN")
        self.phone_number = os.environ.get("TWILIO_PHONE_NUMBER")
        self.initialized = False
        self.client = None
        self.phone_numbers = {}  # Mapeamento de user_id para n√∫mero de telefone
    
    def is_available(self):
        """Verifica se as credenciais do Twilio est√£o dispon√≠veis"""
        return bool(self.account_sid and self.auth_token and self.phone_number)
    
    def initialize(self):
        """Inicializa o cliente do Twilio se poss√≠vel"""
        if not self.is_available():
            logger.warning("‚ö†Ô∏è Credenciais do Twilio n√£o configuradas completamente")
            return False
        
        try:
            # Em um ambiente real, usar√≠amos algo como:
            # from twilio.rest import Client
            # self.client = Client(self.account_sid, self.auth_token)
            
            logger.info("üîÑ Inicializando cliente do Twilio para WhatsApp...")
            
            # Simulamos a inicializa√ß√£o
            time.sleep(0.5)  # Simula tempo de inicializa√ß√£o
            
            self.initialized = True
            logger.info(f"‚úÖ Cliente Twilio inicializado com sucesso para o n√∫mero {self.phone_number}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar cliente do Twilio: {str(e)}")
            return False
    
    def send_message(self, user_id, text, **kwargs):
        """
        Envia uma mensagem para um usu√°rio via WhatsApp
        
        Args:
            user_id: ID do usu√°rio no sistema
            text: Texto da mensagem
            **kwargs: Argumentos adicionais
            
        Returns:
            bool: True se enviado com sucesso, False caso contr√°rio
        """
        if not self.initialized and not self.initialize():
            logger.error("‚ùå Cliente Twilio n√£o inicializado. Imposs√≠vel enviar mensagem.")
            return False
        
        try:
            # Verifica se temos o n√∫mero de telefone para este user_id
            to_phone = self.phone_numbers.get(user_id)
            if not to_phone:
                logger.warning(f"‚ö†Ô∏è N√∫mero de telefone n√£o encontrado para o usu√°rio {user_id}")
                return False
            
            logger.info(f"üì§ Enviando mensagem WhatsApp para usu√°rio {user_id} ({to_phone})")
            logger.info(f"üìù Mensagem: {text[:50]}...")
            
            # Em um ambiente real, usar√≠amos:
            # message = self.client.messages.create(
            #     body=text,
            #     from_=f'whatsapp:{self.phone_number}',
            #     to=f'whatsapp:{to_phone}'
            # )
            # return message.sid is not None
            
            # Simula√ß√£o para desenvolvimento
            success = True  # Simulando sucesso no envio
            
            if success:
                logger.info("‚úÖ Mensagem WhatsApp enviada com sucesso!")
            else:
                logger.error("‚ùå Falha ao enviar mensagem WhatsApp")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem WhatsApp: {str(e)}")
            return False
    
    def send_media(self, user_id, media_path, caption=None, **kwargs):
        """
        Envia uma m√≠dia para um usu√°rio via WhatsApp
        
        Args:
            user_id: ID do usu√°rio no sistema
            media_path: Caminho para o arquivo de m√≠dia
            caption: Legenda da m√≠dia (opcional)
            **kwargs: Argumentos adicionais
            
        Returns:
            bool: True se enviado com sucesso, False caso contr√°rio
        """
        if not self.initialized and not self.initialize():
            logger.error("‚ùå Cliente Twilio n√£o inicializado. Imposs√≠vel enviar m√≠dia.")
            return False
        
        try:
            # Verifica se temos o n√∫mero de telefone para este user_id
            to_phone = self.phone_numbers.get(user_id)
            if not to_phone:
                logger.warning(f"‚ö†Ô∏è N√∫mero de telefone n√£o encontrado para o usu√°rio {user_id}")
                return False
            
            # Verifica se o arquivo existe
            if not os.path.exists(media_path):
                logger.error(f"‚ùå Arquivo n√£o encontrado: {media_path}")
                return False
            
            logger.info(f"üì§ Enviando m√≠dia por WhatsApp para usu√°rio {user_id} ({to_phone})")
            
            # Determina o tipo de m√≠dia pelo nome do arquivo
            media_type = media_path.split('.')[-1].lower()
            if media_type in ['jpg', 'jpeg', 'png', 'gif']:
                media_type = 'image'
            elif media_type in ['mp3', 'wav', 'ogg']:
                media_type = 'audio'
            elif media_type in ['mp4', 'mov', '3gp']:
                media_type = 'video'
            else:
                media_type = 'document'
            
            logger.info(f"üìé Tipo de m√≠dia: {media_type}")
            
            # Em um ambiente real, usar√≠amos:
            # media_url = f'{some_url_here}/{media_path}'
            # message = self.client.messages.create(
            #     media_url=[media_url],
            #     body=caption if caption else '',
            #     from_=f'whatsapp:{self.phone_number}',
            #     to=f'whatsapp:{to_phone}'
            # )
            # return message.sid is not None
            
            # Simula√ß√£o para desenvolvimento
            success = True  # Simulando sucesso no envio
            
            if success:
                logger.info(f"‚úÖ {media_type.capitalize()} enviado com sucesso por WhatsApp!")
            else:
                logger.error(f"‚ùå Falha ao enviar {media_type} por WhatsApp")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar m√≠dia por WhatsApp: {str(e)}")
            return False
    
    def register_phone(self, user_id, phone_number):
        """
        Registra o n√∫mero de telefone de um usu√°rio para envio de mensagens
        
        Args:
            user_id: ID do usu√°rio no sistema
            phone_number: N√∫mero de telefone no formato E.164 (ex: +5511999998888)
        """
        # Faz uma valida√ß√£o b√°sica do formato do n√∫mero
        if not phone_number.startswith('+'):
            phone_number = '+' + phone_number
            
        self.phone_numbers[user_id] = phone_number
        logger.info(f"‚úÖ N√∫mero {phone_number} registrado para o usu√°rio {user_id}")
        return True
    
    def run(self, action, **kwargs):
        """
        Executa uma a√ß√£o na API do WhatsApp
        
        Args:
            action: A√ß√£o a ser executada (send_message, send_media, register_phone)
            **kwargs: Par√¢metros espec√≠ficos para cada a√ß√£o
            
        Returns:
            dict: Resultado da opera√ß√£o
        """
        try:
            result = {"success": False, "action": action}
            
            if action == "send_message":
                user_id = kwargs.get("user_id")
                text = kwargs.get("text")
                
                if not user_id or not text:
                    result["error"] = "Par√¢metros obrigat√≥rios: user_id, text"
                    return result
                
                success = self.send_message(user_id, text)
                result["success"] = success
                
            elif action == "send_media":
                user_id = kwargs.get("user_id")
                media_path = kwargs.get("media_path")
                caption = kwargs.get("caption")
                
                if not user_id or not media_path:
                    result["error"] = "Par√¢metros obrigat√≥rios: user_id, media_path"
                    return result
                
                success = self.send_media(user_id, media_path, caption)
                result["success"] = success
                
            elif action == "register_phone":
                user_id = kwargs.get("user_id")
                phone_number = kwargs.get("phone_number")
                
                if not user_id or not phone_number:
                    result["error"] = "Par√¢metros obrigat√≥rios: user_id, phone_number"
                    return result
                
                success = self.register_phone(user_id, phone_number)
                result["success"] = success
                
            else:
                result["error"] = f"A√ß√£o desconhecida: {action}"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar a√ß√£o {action}: {str(e)}")
            return {"success": False, "action": action, "error": str(e)}

# Cria uma inst√¢ncia da ferramenta para uso
whatsapp_tool = WhatsAppTool()

# Fun√ß√£o auxiliar para interface com o CrewAI
def whatsapp_action(action, **kwargs):
    """
    Executa uma a√ß√£o no WhatsApp
    
    Args:
        action: A√ß√£o a ser executada
        **kwargs: Par√¢metros espec√≠ficos para cada a√ß√£o
        
    Returns:
        str: Resultado em formato JSON
    """
    result = whatsapp_tool.run(action, **kwargs)
    return json.dumps(result)

# Teste simples se executado diretamente
if __name__ == "__main__":
    # Verifica√ß√£o b√°sica do ambiente
    if not whatsapp_tool.is_available():
        print("‚ö†Ô∏è Credenciais do Twilio n√£o configuradas completamente")
    else:
        print(f"üîë Credenciais do Twilio configuradas para o n√∫mero {whatsapp_tool.phone_number}")
    
    # Inicializa o cliente
    if whatsapp_tool.initialize():
        print("üöÄ Cliente Twilio inicializado com sucesso!")
        
        # Exemplo de registro de n√∫mero de telefone
        whatsapp_tool.register_phone(1, "+5511999998888")
        
        # Exemplo de envio de mensagem
        result = whatsapp_tool.run("send_message", user_id=1, text="Ol√° do TarefoAI via WhatsApp!")
        print(json.dumps(result, indent=2))