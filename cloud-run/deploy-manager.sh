#!/bin/bash

# Script de gerenciamento de implanta√ß√£o do Tarefo AI
# Este script oferece uma interface amig√°vel para todas as opera√ß√µes de implanta√ß√£o

# Cores para formata√ß√£o
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Sem cor

# Configura√ß√µes
PROJECT_ID="tarefo-ai-prod"
REGION="southamerica-east1"
SERVICE_NAME="tarefo-ai"

# Fun√ß√£o para exibir a ajuda
function show_help {
    echo -e "${BLUE}=== Tarefo AI - Gerenciador de Implanta√ß√£o ===${NC}"
    echo ""
    echo "Uso: $0 [comando]"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  setup              Configura√ß√£o inicial (projeto, APIs, banco de dados)"
    echo "  deploy             Implanta a aplica√ß√£o no Cloud Run"
    echo "  deploy-function    Implanta a Cloud Function para webhooks"
    echo "  setup-secrets      Configura os segredos necess√°rios"
    echo "  setup-scheduler    Configura tarefas agendadas"
    echo "  setup-monitoring   Configura alertas e monitoramento"
    echo "  logs               Visualiza logs da aplica√ß√£o"
    echo "  status             Verifica o status da implanta√ß√£o"
    echo "  all                Executa toda a implanta√ß√£o (setup + deploy + function)"
    echo "  help               Exibe esta ajuda"
    echo ""
    echo -e "${YELLOW}Exemplo: $0 deploy${NC}"
}

# Fun√ß√£o para configura√ß√£o inicial
function setup {
    echo -e "${BLUE}Iniciando configura√ß√£o inicial...${NC}"
    
    # Verificar login
    echo "üîë Verificando autentica√ß√£o no Google Cloud..."
    if ! gcloud auth print-access-token &> /dev/null; then
        echo "üìù Fa√ßa login no Google Cloud..."
        gcloud auth login
    fi
    
    # Configurar projeto
    echo "üîß Configurando projeto ${PROJECT_ID}..."
    gcloud config set project ${PROJECT_ID}
    
    # Habilitar APIs necess√°rias
    echo "üîå Habilitando APIs necess√°rias..."
    gcloud services enable cloudbuild.googleapis.com run.googleapis.com \
        sqladmin.googleapis.com secretmanager.googleapis.com \
        cloudfunctions.googleapis.com cloudscheduler.googleapis.com
    
    echo -e "${GREEN}‚úì Configura√ß√£o inicial conclu√≠da.${NC}"
    
    # Perguntar se deseja configurar o banco de dados
    read -p "Deseja configurar o banco de dados agora? (s/n): " setup_db
    if [[ $setup_db == "s" || $setup_db == "S" ]]; then
        bash cloud-run/setup-database.sh
    fi
}

# Fun√ß√£o para implanta√ß√£o no Cloud Run
function deploy {
    echo -e "${BLUE}Iniciando implanta√ß√£o no Cloud Run...${NC}"
    
    # Verificar qual m√©todo de implanta√ß√£o usar
    if command -v docker &> /dev/null; then
        echo "üê≥ Docker encontrado, usando implanta√ß√£o padr√£o..."
        bash cloud-run/script-deploy.sh
    else
        echo "üîÑ Docker n√£o encontrado, usando Cloud Build para implanta√ß√£o..."
        bash cloud-run/deploy-without-docker.sh
    fi
    
    echo -e "${GREEN}‚úì Implanta√ß√£o conclu√≠da.${NC}"
}

# Fun√ß√£o para implantar a Cloud Function
function deploy_function {
    echo -e "${BLUE}Iniciando implanta√ß√£o da Cloud Function para webhooks...${NC}"
    bash cloud-run/deploy-function.sh
    echo -e "${GREEN}‚úì Implanta√ß√£o da fun√ß√£o conclu√≠da.${NC}"
}

# Fun√ß√£o para configurar segredos
function setup_secrets {
    echo -e "${BLUE}Configurando segredos...${NC}"
    bash cloud-run/setup-secrets.sh
    echo -e "${GREEN}‚úì Configura√ß√£o de segredos conclu√≠da.${NC}"
}

# Fun√ß√£o para configurar tarefas agendadas
function setup_scheduler {
    echo -e "${BLUE}Configurando tarefas agendadas...${NC}"
    bash cloud-run/setup-scheduler.sh
    echo -e "${GREEN}‚úì Configura√ß√£o de tarefas agendadas conclu√≠da.${NC}"
}

# Fun√ß√£o para configurar monitoramento
function setup_monitoring {
    echo -e "${BLUE}Configurando monitoramento...${NC}"
    bash cloud-run/setup-monitoring.sh
    echo -e "${GREEN}‚úì Configura√ß√£o de monitoramento conclu√≠da.${NC}"
}

# Fun√ß√£o para visualizar logs
function view_logs {
    echo -e "${BLUE}Buscando logs recentes da aplica√ß√£o...${NC}"
    gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${SERVICE_NAME}" --limit=50
}

# Fun√ß√£o para verificar status
function check_status {
    echo -e "${BLUE}Verificando status da implanta√ß√£o...${NC}"
    
    # Verificar servi√ßo Cloud Run
    echo "üîç Verificando servi√ßo Cloud Run..."
    if gcloud run services describe ${SERVICE_NAME} --region=${REGION} &> /dev/null; then
        SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format="value(status.url)")
        echo -e "${GREEN}‚úì Servi√ßo Cloud Run est√° em execu√ß√£o: ${SERVICE_URL}${NC}"
        
        # Verificar status HTTP
        echo "üåê Verificando resposta HTTP..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${SERVICE_URL})
        if [[ $HTTP_STATUS == 2* ]]; then
            echo -e "${GREEN}‚úì Aplica√ß√£o est√° respondendo com status HTTP ${HTTP_STATUS}${NC}"
        else
            echo -e "${RED}‚úó Aplica√ß√£o est√° respondendo com status HTTP ${HTTP_STATUS}${NC}"
        fi
    else
        echo -e "${RED}‚úó Servi√ßo Cloud Run n√£o encontrado${NC}"
    fi
    
    # Verificar banco de dados
    echo "üîç Verificando inst√¢ncia do Cloud SQL..."
    if gcloud sql instances describe tarefo-ai-db &> /dev/null; then
        echo -e "${GREEN}‚úì Inst√¢ncia do Cloud SQL est√° em execu√ß√£o${NC}"
    else
        echo -e "${RED}‚úó Inst√¢ncia do Cloud SQL n√£o encontrada${NC}"
    fi
    
    # Verificar Cloud Function
    echo "üîç Verificando Cloud Function..."
    if gcloud functions describe whatsapp-webhook --region=${REGION} &> /dev/null; then
        FUNCTION_URL=$(gcloud functions describe whatsapp-webhook --region=${REGION} --format="value(httpsTrigger.url)")
        echo -e "${GREEN}‚úì Cloud Function est√° em execu√ß√£o: ${FUNCTION_URL}${NC}"
    else
        echo -e "${YELLOW}‚ö† Cloud Function n√£o encontrada ou n√£o implantada ainda${NC}"
    fi
}

# Fun√ß√£o para executar todo o processo
function deploy_all {
    echo -e "${BLUE}Iniciando processo completo de implanta√ß√£o...${NC}"
    setup
    setup_secrets
    deploy
    deploy_function
    setup_scheduler
    setup_monitoring
    check_status
    echo -e "${GREEN}‚úì Processo completo de implanta√ß√£o conclu√≠do.${NC}"
}

# Menu principal
case "$1" in
    setup)
        setup
        ;;
    deploy)
        deploy
        ;;
    deploy-function)
        deploy_function
        ;;
    setup-secrets)
        setup_secrets
        ;;
    setup-scheduler)
        setup_scheduler
        ;;
    setup-monitoring)
        setup_monitoring
        ;;
    logs)
        view_logs
        ;;
    status)
        check_status
        ;;
    all)
        deploy_all
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${YELLOW}Comando n√£o reconhecido: $1${NC}"
        show_help
        exit 1
        ;;
esac

exit 0