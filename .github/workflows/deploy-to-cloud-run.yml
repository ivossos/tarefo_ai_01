name: Deploy TarefoAI to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: tarefoai
      
      - name: Manual Google Auth
        run: |
          # Criar arquivo tempor√°rio com as credenciais
          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > /tmp/gcp-credentials.json
          # Autenticar usando o arquivo de credenciais
          gcloud auth activate-service-account --key-file=/tmp/gcp-credentials.json
          # Definir projeto ativo
          gcloud config set project tarefoai
      
      - name: Enable required APIs
        run: |
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud services enable artifactregistry.googleapis.com
          gcloud services enable cloudfunctions.googleapis.com
      
      - name: Deploy using Cloud Build with retry
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          WAIT_TIME=180  # Espera inicial em segundos (3 minutos)
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Tentativa $((RETRY_COUNT+1)) de $MAX_RETRIES para submeter build..."
            
            if gcloud builds submit --config cloudbuild-new.yaml --substitutions=_REGION=southamerica-east1,_SERVICE_NAME=tarefo-ai,_ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} --polling-interval=30 --verbosity=warning; then
              echo "‚úÖ Build submetido com sucesso!"
              break
            else
              ERROR_CODE=$?
              RETRY_COUNT=$((RETRY_COUNT+1))
              
              # Lidar com diferentes tipos de erros
              if [[ $ERROR_CODE -eq 1 ]]; then
                # Verifica se a mensagem de erro cont√©m "logs are being written"
                if grep -q "logs are being written to the default logs bucket" <<< "$(cat /dev/stderr 2>/dev/null)"; then
                  echo "‚ö†Ô∏è Build iniciado, mas n√£o podemos visualizar os logs."
                  echo "üîç Verificando status do build na console..."
                  
                  # Espera por um tempo para o build executar
                  echo "‚è≥ Aguardando 5 minutos para o build ser conclu√≠do..."
                  sleep 300
                  
                  # Considera como sucesso e prossegue
                  echo "‚úÖ Assumindo que o build foi bem-sucedido. Verifique manualmente no Console do GCP."
                  break
                else
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    echo "‚ö†Ô∏è Erro no Cloud Build (possivelmente quota excedida). Tentativa $RETRY_COUNT de $MAX_RETRIES."
                    echo "üïí Aguardando $WAIT_TIME segundos antes da pr√≥xima tentativa..."
                    sleep $WAIT_TIME
                    WAIT_TIME=$((WAIT_TIME*2))  # Backoff exponencial
                  else
                    echo "‚ùå Falha ap√≥s $MAX_RETRIES tentativas devido a erros persistentes."
                    echo "üìù Considere solicitar um aumento de quota em: https://cloud.google.com/docs/quotas/help/request_increase"
                    exit 1
                  fi
                fi
              else
                echo "‚ùå Falha ao submeter build com erro n√£o relacionado a quota. Abortando."
                exit $ERROR_CODE
              fi
            fi
          done
          
          # Verificar implanta√ß√£o no Cloud Run (mesmo que n√£o possamos ver os logs)
          echo "üîç Verificando status da implanta√ß√£o no Cloud Run..."
          if gcloud run services describe tarefo-ai --region=southamerica-east1 --format="value(status.url)" > /dev/null 2>&1; then
            CLOUD_RUN_URL=$(gcloud run services describe tarefo-ai --region=southamerica-east1 --format="value(status.url)")
            echo "‚úÖ Implanta√ß√£o bem-sucedida! Servi√ßo dispon√≠vel em: $CLOUD_RUN_URL"
            
            # Enviar uma requisi√ß√£o de teste para verificar se o servi√ßo est√° respondendo
            echo "üåê Testando conex√£o com o servi√ßo..."
            if curl -s -o /dev/null -w "%{http_code}" $CLOUD_RUN_URL | grep -q "200\|301\|302"; then
              echo "‚úÖ Servi√ßo est√° respondendo normalmente!"
            else
              echo "‚ö†Ô∏è Servi√ßo implantado, mas pode n√£o estar respondendo corretamente. Verifique manualmente."
            fi
          else
            echo "‚ö†Ô∏è N√£o foi poss√≠vel verificar o status da implanta√ß√£o. Verifique manualmente no Console do GCP."
          fi
