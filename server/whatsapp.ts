/**
 * WhatsApp Client Simulator - Implementa√ß√£o simplificada para ambientes de desenvolvimento
 * 
 * Este m√≥dulo fornece uma implementa√ß√£o simulada do cliente WhatsApp baseada em webhooks
 * para ambientes onde n√£o √© poss√≠vel executar o navegador headless.
 */

import { storage } from './storage';
import { users } from '@shared/schema';
import { eq } from 'drizzle-orm';
import { db } from './db';

// Mapeamento de n√∫meros de WhatsApp para IDs de usu√°rios no sistema
export const phoneToUserId = new Map<string, number>();

// Mapeia n√∫meros de telefone para c√≥digos de verifica√ß√£o
export const verificationCodes = new Map<string, string>();

// Status simulado do cliente
let isClientReady = false;

// Enfileira mensagens para serem enviadas posteriormente
// Em um ambiente real, estas seriam enviadas via API do WhatsApp
const messageQueue = new Map<string, string[]>();

// Classe de mensagem simulada
class MessageSimulator {
  public from: string;
  public body: string;
  public id: string;
  
  constructor(from: string, body: string) {
    this.from = from;
    this.body = body;
    this.id = Math.random().toString(36).substring(7);
  }
}

// M√©todos simulados para envio de mensagens
const sendMessageToPhone = async (to: string, content: string): Promise<boolean> => {
  try {
    // Normaliza o n√∫mero de telefone para garantir consist√™ncia
    const normalizedTo = normalizePhoneNumber(to);
    
    console.log(`üì§ [WhatsApp Simulado] Enviando mensagem para ${normalizedTo}: ${content.substring(0, 30)}...`);
    
    // Adiciona a mensagem √† fila de mensagens para este n√∫mero
    if (!messageQueue.has(normalizedTo)) {
      messageQueue.set(normalizedTo, []);
    }
    messageQueue.get(normalizedTo)?.push(content);
    
    return true;
  } catch (error) {
    console.error('Erro ao enviar mensagem para WhatsApp:', error);
    return false;
  }
};

// Fun√ß√£o para normalizar n√∫meros de telefone
export function normalizePhoneNumber(phone: string): string {
  // Adiciona o "+" no in√≠cio se n√£o existir
  let normalizedPhone = phone;
  if (!normalizedPhone.startsWith('+') && !normalizedPhone.startsWith('whatsapp:+')) {
    normalizedPhone = `+${normalizedPhone}`;
  }
  // Remove prefixo 'whatsapp:' se existir
  if (normalizedPhone.startsWith('whatsapp:+')) {
    normalizedPhone = normalizedPhone.replace('whatsapp:', '');
  }
  return normalizedPhone;
}

// Obt√©m as mensagens na fila para um determinado n√∫mero
export const getQueuedMessagesForPhone = (phone: string): string[] => {
  const normalizedPhone = normalizePhoneNumber(phone);
  return messageQueue.get(normalizedPhone) || [];
};

// Limpa a fila de mensagens para um determinado n√∫mero
export const clearQueuedMessagesForPhone = (phone: string): void => {
  const normalizedPhone = normalizePhoneNumber(phone);
  messageQueue.delete(normalizedPhone);
};

// Fun√ß√£o auxiliar para gerar uma barra de progresso visual
export function createProgressBar(percentage: number): string {
  const filledLength = Math.floor(percentage / 10);
  const emptyLength = 10 - filledLength;
  const filled = '‚ñà'.repeat(filledLength);
  const empty = '‚ñë'.repeat(emptyLength);
  return `${filled}${empty}`;
}

// Utiliza o sistema de processamento de mensagens para gerar respostas
async function generateAIResponse(message: string): Promise<string> {
  try {
    // Tenta usar o adaptador TarefoAI primeiro (multi-provider)
    try {
      const { processMessage } = await import('./tarefo-ai-adapter');
      const tempUserId = 0;
      return await processMessage(tempUserId, message);
    } catch (tarefoError) {
      console.warn('Falha ao usar adaptador TarefoAI, tentando OpenAI diretamente:', tarefoError);
      
      // Fallback para OpenAI direto
      const { processMessage } = await import('./openai');
      const tempUserId = 0;
      return await processMessage(tempUserId, message);
    }
  } catch (error) {
    console.error('Erro ao processar mensagem com AI:', error);
    return 'Desculpe, estou com dificuldades para processar sua mensagem. Pode tentar novamente?';
  }
}

// Fun√ß√£o para gerar um c√≥digo de verifica√ß√£o
export function generateVerificationCode(phone: string): string {
  const code = Math.floor(100000 + Math.random() * 900000).toString();
  verificationCodes.set(code, phone);
  return code;
}

// Fun√ß√£o para enviar mensagem para um usu√°rio espec√≠fico
export async function sendMessageToUser(userId: number, message: string): Promise<boolean> {
  // Encontra o n√∫mero de WhatsApp associado a este usu√°rio
  let found = false;
  
  phoneToUserId.forEach((id, phone) => {
    if (id === userId && !found) {
      found = true;
      try {
        sendMessageToPhone(phone, message);
      } catch (error) {
        console.error(`Erro ao enviar mensagem para o usu√°rio ${userId}:`, error);
        found = false;
      }
    }
  });
  
  return found;
}

// Inicia o cliente do WhatsApp
export async function startWhatsAppClient(): Promise<void> {
  try {
    // Simula inicializa√ß√£o
    console.log('üîÑ Inicializando cliente WhatsApp...');
    
    // Espera um curto per√≠odo para simular inicializa√ß√£o
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Marca cliente como pronto
    isClientReady = true;
    
    console.log('‚úì Cliente WhatsApp (modo simula√ß√£o) inicializado com sucesso');
    console.log('‚ÑπÔ∏è Nota: Este √© um cliente WhatsApp simulado para desenvolvimento');
    console.log('‚ÑπÔ∏è Para testar, use a rota "/api/whatsapp/simulate" para simular mensagens recebidas');
    
    return Promise.resolve();
  } catch (error) {
    console.error('‚ùå Erro ao iniciar o cliente WhatsApp simulado:', error);
    return Promise.reject(error);
  }
}

/**
 * Processa uma mensagem recebida via webhook do WhatsApp
 * Esta fun√ß√£o deve ser chamada pelo endpoint do webhook quando uma notifica√ß√£o de mensagem for recebida
 */
export async function processWebhookMessage(messageData: any): Promise<void> {
  try {
    // Verifica se a mensagem tem o formato esperado
    if (!messageData || !messageData.from || !messageData.body) {
      console.warn('‚ö†Ô∏è Formato de mensagem do webhook inv√°lido:', messageData);
      return;
    }
    
    // Cria uma inst√¢ncia da mensagem simulada se n√£o for uma
    const message = messageData instanceof MessageSimulator 
      ? messageData 
      : new MessageSimulator(messageData.from, messageData.body);
    
    console.log(`üì• Processando mensagem do webhook do WhatsApp: ${message.id}`);
    
    // Extrai as informa√ß√µes da mensagem e normaliza o n√∫mero de telefone
    // Remove @c.us se presente
    let phoneNumber = message.from.includes('@c.us') 
      ? message.from.replace('@c.us', '') 
      : message.from;
    
    // Normaliza o n√∫mero de telefone usando a fun√ß√£o auxiliar
    phoneNumber = normalizePhoneNumber(phoneNumber);
      
    const messageText = message.body;
    
    // Verifica se o n√∫mero est√° associado a um usu√°rio no sistema
    let userId = phoneToUserId.get(phoneNumber);
    
    // Se n√£o encontrou o usu√°rio pelo mapa em mem√≥ria, tenta encontrar no banco de dados
    if (!userId) {
      try {
        // Busca um usu√°rio com este n√∫mero de telefone
        const [user] = await db.select().from(users).where(eq(users.phone, phoneNumber));
        if (user) {
          // Guarda a associa√ß√£o para uso futuro
          userId = user.id;
          phoneToUserId.set(phoneNumber, userId);
        }
      } catch (dbError) {
        console.error('Erro ao buscar usu√°rio no banco de dados:', dbError);
      }
    }
    
    // Se √© um c√≥digo de verifica√ß√£o
    if (verificationCodes.has(messageText)) {
      const phone = verificationCodes.get(messageText);
      if (phone) {
        try {
          // Busca o usu√°rio por telefone
          const [user] = await db.select().from(users).where(eq(users.phone, phone));
          
          if (user) {
            // Vincula o n√∫mero do WhatsApp ao ID do usu√°rio
            phoneToUserId.set(phoneNumber, user.id);
            
            // Remove o c√≥digo de verifica√ß√£o
            verificationCodes.delete(messageText);
            
            // Envia mensagem de confirma√ß√£o
            await sendMessageToPhone(phoneNumber, 
              'Sua conta foi verificada com sucesso! üéâ\n\n' +
              'Agora voc√™ pode usar o Tarefo AI pelo WhatsApp. Envie *ajuda* para ver os comandos dispon√≠veis.'
            );
            
            return;
          }
        } catch (error) {
          console.error('Erro ao verificar usu√°rio:', error);
        }
      }
    }
    
    // Se o usu√°rio j√° est√° autenticado
    if (userId) {
      // Salva a mensagem no banco de dados
      await storage.createChatMessage({
        userId,
        content: messageText,
        isFromUser: true,
        platform: 'whatsapp'
      });
      
      // Processa comandos espec√≠ficos
      if (messageText.toLowerCase() === 'ajuda') {
        await sendMessageToPhone(phoneNumber,
          '*Comandos dispon√≠veis:*\n\n' +
          '*lembretes* - Ver seus pr√≥ximos lembretes\n' +
          '*agenda* - Ver sua agenda para hoje\n' +
          '*contas* - Ver saldo de suas contas banc√°rias\n' +
          '*transa√ß√µes* - Ver suas √∫ltimas transa√ß√µes\n' +
          '*metas* - Ver suas metas financeiras\n' +
          '*ajuda* - Mostrar esta mensagem de ajuda'
        );
        return;
      }
      
      if (messageText.toLowerCase() === 'lembretes') {
        const reminders = await storage.getUpcomingReminders(userId, 5);
        
        if (reminders.length === 0) {
          await sendMessageToPhone(phoneNumber, 'Voc√™ n√£o tem lembretes pr√≥ximos.');
          return;
        }
        
        let message = '*Seus pr√≥ximos lembretes:*\n\n';
        
        for (const reminder of reminders) {
          const date = new Date(reminder.dueDate).toLocaleDateString('pt-BR');
          message += `- *${reminder.title}* (${date})\n`;
        }
        
        await sendMessageToPhone(phoneNumber, message);
        return;
      }
      
      if (messageText.toLowerCase() === 'agenda') {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const events = await storage.getEventsByDate(userId, today);
        
        if (events.length === 0) {
          await sendMessageToPhone(phoneNumber, 'Voc√™ n√£o tem eventos para hoje.');
          return;
        }
        
        let message = '*Seus eventos para hoje:*\n\n';
        
        for (const event of events) {
          const time = new Date(event.startTime).toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
          message += `- *${time}* - ${event.title}\n`;
          if (event.location) {
            message += `  Local: ${event.location}\n`;
          }
        }
        
        await sendMessageToPhone(phoneNumber, message);
        return;
      }
      
      // Comandos para funcionalidades financeiras
      if (messageText.toLowerCase() === 'contas') {
        try {
          const bankAccounts = await storage.getBankAccountsByUserId(userId);
          
          if (bankAccounts.length === 0) {
            await sendMessageToPhone(phoneNumber, 'Voc√™ ainda n√£o tem contas banc√°rias cadastradas. Acesse o app web para configurar.');
            return;
          }
          
          let message = '*Suas contas banc√°rias:*\n\n';
          
          for (const account of bankAccounts) {
            // Busca informa√ß√µes do banco
            const bank = await storage.getBank(account.bankId);
            const bankName = bank?.name || 'Banco';
            
            // Formata o saldo como moeda brasileira
            const balance = parseFloat(account.balance || '0');
            const formattedBalance = balance.toLocaleString('pt-BR', {
              style: 'currency',
              currency: 'BRL'
            });
            
            message += `- *${bankName}* - ${account.accountName || 'Conta Principal'}\n`;
            message += `  Saldo: *${formattedBalance}*\n`;
            
            // Se tiver data de √∫ltima sincroniza√ß√£o
            if (account.lastSyncedAt) {
              const lastSyncDate = new Date(account.lastSyncedAt).toLocaleDateString('pt-BR');
              message += `  Atualizado em: ${lastSyncDate}\n`;
            }
            
            message += '\n';
          }
          
          await sendMessageToPhone(phoneNumber, message);
        } catch (error) {
          console.error('Erro ao buscar contas banc√°rias:', error);
          await sendMessageToPhone(phoneNumber, 'Ocorreu um erro ao consultar suas contas banc√°rias. Por favor, tente novamente mais tarde.');
        }
        return;
      }
      
      if (messageText.toLowerCase() === 'transa√ß√µes' || messageText.toLowerCase() === 'transacoes') {
        try {
          // Obt√©m data atual menos 30 dias para mostrar transa√ß√µes recentes
          const startDate = new Date();
          startDate.setDate(startDate.getDate() - 30);
          
          // Busca as transa√ß√µes do usu√°rio
          const transactions = await storage.getTransactionsByUserId(userId, startDate, undefined, 10);
          
          if (transactions.length === 0) {
            await sendMessageToPhone(phoneNumber, 'Voc√™ n√£o tem transa√ß√µes recentes nos √∫ltimos 30 dias.');
            return;
          }
          
          let message = '*Suas transa√ß√µes recentes:*\n\n';
          
          for (const transaction of transactions) {
            // Obt√©m dados da conta banc√°ria
            const account = await storage.getBankAccount(transaction.bankAccountId);
            const bank = account ? await storage.getBank(account.bankId) : null;
            const bankName = bank ? bank.name : 'Banco';
            
            // Formata a data
            const date = new Date(transaction.date).toLocaleDateString('pt-BR');
            
            // Formata o valor como moeda brasileira
            const amount = parseFloat(transaction.amount);
            const formattedAmount = amount.toLocaleString('pt-BR', {
              style: 'currency',
              currency: 'BRL'
            });
            
            // S√≠mbolo para indicar entrada ou sa√≠da
            const symbol = transaction.type === 'entrada' ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è';
            
            // Adiciona a transa√ß√£o √† mensagem
            message += `${symbol} *${formattedAmount}* (${date})\n`;
            message += `üìù ${transaction.description}\n`;
            
            // Adiciona a categoria se dispon√≠vel
            if (transaction.category) {
              message += `üè∑Ô∏è ${transaction.category}\n`;
            }
            
            message += `üè¶ ${bankName}\n\n`;
          }
          
          await sendMessageToPhone(phoneNumber, message);
        } catch (error) {
          console.error('Erro ao buscar transa√ß√µes:', error);
          await sendMessageToPhone(phoneNumber, 'Ocorreu um erro ao consultar suas transa√ß√µes. Por favor, tente novamente mais tarde.');
        }
        return;
      }
      
      if (messageText.toLowerCase() === 'metas') {
        try {
          // Busca as metas financeiras do usu√°rio
          const goals = await storage.getFinancialGoalsByUserId(userId);
          
          if (goals.length === 0) {
            await sendMessageToPhone(phoneNumber, 'Voc√™ n√£o tem metas financeiras cadastradas. Acesse o app web para criar suas metas.');
            return;
          }
          
          let message = '*Suas metas financeiras:*\n\n';
          
          for (const goal of goals) {
            // Calcula o progresso da meta
            const target = parseFloat(goal.targetAmount);
            const current = parseFloat(goal.currentAmount || '0');
            const percentage = Math.min(Math.round((current / target) * 100), 100);
            
            // Formata os valores como moeda brasileira
            const formattedTarget = target.toLocaleString('pt-BR', {
              style: 'currency',
              currency: 'BRL'
            });
            
            const formattedCurrent = current.toLocaleString('pt-BR', {
              style: 'currency',
              currency: 'BRL'
            });
            
            // Cria uma barra de progresso visual simples usando a fun√ß√£o auxiliar
            const progressBar = createProgressBar(percentage);
            
            // Adiciona a meta √† mensagem
            message += `*${goal.title}*\n`;
            message += `${formattedCurrent} de ${formattedTarget} (${percentage}%)\n`;
            message += `${progressBar}\n\n`;
          }
          
          await sendMessageToPhone(phoneNumber, message);
        } catch (error) {
          console.error('Erro ao buscar metas financeiras:', error);
          await sendMessageToPhone(phoneNumber, 'Ocorreu um erro ao consultar suas metas financeiras. Por favor, tente novamente mais tarde.');
        }
        return;
      }
      
      // Para mensagens normais, usa OpenAI para gerar resposta
      try {
        const aiResponse = await generateAIResponse(messageText);
        
        // Salva a resposta no banco de dados
        await storage.createChatMessage({
          userId,
          content: aiResponse,
          isFromUser: false,
          platform: 'whatsapp'
        });
        
        // Envia a resposta
        await sendMessageToPhone(phoneNumber, aiResponse);
      } catch (aiError) {
        console.error('Erro ao processar resposta IA:', aiError);
        await sendMessageToPhone(phoneNumber, 
          'Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente mais tarde.'
        );
      }
    } else {
      // Usu√°rio n√£o autenticado
      await sendMessageToPhone(phoneNumber, 
        'Ol√°! Para usar o Tarefo AI pelo WhatsApp, voc√™ precisa vincular sua conta.\n\n' +
        'Acesse o site do Tarefo AI e siga as instru√ß√µes de vincula√ß√£o na se√ß√£o de Prefer√™ncias.'
      );
    }
  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem do webhook:', error);
  }
}

/**
 * Simula o envio de uma mensagem do WhatsApp para o sistema
 * √ötil para testes durante o desenvolvimento
 */
export async function simulateIncomingMessage(phoneNumber: string, messageText: string): Promise<void> {
  // Cria uma mensagem simulada
  const message = new MessageSimulator(`${phoneNumber}`, messageText);
  
  // Processa a mensagem como se fosse recebida via webhook
  await processWebhookMessage(message);
}